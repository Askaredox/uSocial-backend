AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creacion de VPC con dos subredes una publica y una privada'
Parameters:
  VPCName:
    Description: "creacion de nombre "
    Type: String
    Default: "VPC-G4"
  PublicSubnetName:
    Description: Nombre de subred publica 
    Type: String
    Default: public_subnet_semi_pro2
  PrivateSubnetName:
    Description: Nombre de subred privada 
    Type: String
    Default: private_subnet_semi_pro2
  InternetGatewayName:
    Description: Nombre de la InternetGateway
    Type: String
    Default: igw_semi_pro2
  PublicRouteTableName:
    Description: NOmbre de route table p√∫blica 
    Type: String
    Default: public_rt_semi_pro2
  PrivateRouteTableName:
    Description: Nombre de route table privada
    Type: String
    Default: private_rt_semi_pro2

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "172.19.0.0/16"
    Public:
      CIDR: "172.19.1.0/24"
    Private:
      CIDR: "172.19.2.0/24" 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Application
          Value: !Ref "AWS::StackName"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref InternetGatewayName
        - Key: Application
          Value: !Ref "AWS::StackName"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs {Ref: "AWS::Region"}]
      CidrBlock:
        Fn::FindInMap:
            - "SubnetConfig"
            - "Public" 
            - "CIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName
        - Key: Application
          Value: !Ref "AWS::StackName"
  
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs {Ref: "AWS::Region"}] 
      CidrBlock:
        Fn::FindInMap:
            - "SubnetConfig"
            - "Private" 
            - "CIDR"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetName
        - Key: Application
          Value: !Ref "AWS::StackName"
  
  PublicRouteTable:  
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicRouteTableName
        - Key: Application
          Value: !Ref "AWS::StackName"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTableName
        - Key: Application
          Value: !Ref "AWS::StackName"

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
  
Outputs:
  VPCId:
    Description: "VPCId de VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPC"
  PublicSubnet:
    Description: "SubnetId de subred publica"
    Value:
      Ref: "PublicSubnet"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet"
  PrivateSubnet:
    Description: "SubnetId de subred privada"
    Value:
      Ref: "PrivateSubnet"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet"
  InternetGateway:
    Description: "InternetGateway Id"
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-InternetGateway"
  DefaultSecurityGroup:
    Description: "DefaultSecurityGroup Id"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"
